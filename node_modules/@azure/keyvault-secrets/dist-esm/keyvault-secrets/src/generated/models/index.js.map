{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAmNH,qEAAqE;AACrE,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,wBAAwB;IACxB,mCAAc,CAAA;AAChB,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAWD,8EAA8E;AAC9E,MAAM,CAAN,IAAY,0BAeX;AAfD,WAAY,0BAA0B;IACpC,gVAAgV;IAChV,qDAAuB,CAAA;IACvB,sXAAsX;IACtX,4EAA8C,CAAA;IAC9C,8VAA8V;IAC9V,yDAA2B,CAAA;IAC3B,0TAA0T;IAC1T,oGAAsE,CAAA;IACtE,mVAAmV;IACnV,gGAAkE,CAAA;IAClE,2TAA2T;IAC3T,6EAA+C,CAAA;IAC/C,uaAAua;IACva,wHAA0F,CAAA;AAC5F,CAAC,EAfW,0BAA0B,KAA1B,0BAA0B,QAerC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as coreHttpCompat from \"@azure/core-http-compat\";\n\n/** The secret set parameters. */\nexport interface SecretSetParameters {\n  /** The value of the secret. */\n  value: string;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n  /** Type of the secret value such as a password. */\n  contentType?: string;\n  /** The secret management attributes. */\n  secretAttributes?: SecretAttributes;\n}\n\n/** The object attributes managed by the KeyVault service. */\nexport interface Attributes {\n  /** Determines whether the object is enabled. */\n  enabled?: boolean;\n  /** Not before date in UTC. */\n  notBefore?: Date;\n  /** Expiry date in UTC. */\n  expires?: Date;\n  /**\n   * Creation time in UTC.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly created?: Date;\n  /**\n   * Last updated time in UTC.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly updated?: Date;\n}\n\n/** A secret consisting of a value, id and its attributes. */\nexport interface SecretBundle {\n  /** The secret value. */\n  value?: string;\n  /** The secret id. */\n  id?: string;\n  /** The content type of the secret. */\n  contentType?: string;\n  /** The secret management attributes. */\n  attributes?: SecretAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n  /**\n   * If this is a secret backing a KV certificate, then this field specifies the corresponding key backing the KV certificate.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly kid?: string;\n  /**\n   * True if the secret's lifetime is managed by key vault. If this is a secret backing a certificate, then managed will be true.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly managed?: boolean;\n}\n\n/** The key vault error exception. */\nexport interface KeyVaultError {\n  /**\n   * The key vault server error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly error?: ErrorModel;\n}\n\n/** The key vault server error. */\nexport interface ErrorModel {\n  /**\n   * The error code.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly message?: string;\n  /**\n   * The key vault server error.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly innerError?: ErrorModel;\n}\n\n/** The secret update parameters. */\nexport interface SecretUpdateParameters {\n  /** Type of the secret value such as a password. */\n  contentType?: string;\n  /** The secret management attributes. */\n  secretAttributes?: SecretAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** The secret list result. */\nexport interface SecretListResult {\n  /**\n   * A response message containing a list of secrets in the key vault along with a link to the next page of secrets.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: SecretItem[];\n  /**\n   * The URL to get the next set of secrets.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** The secret item containing secret metadata. */\nexport interface SecretItem {\n  /** Secret identifier. */\n  id?: string;\n  /** The secret management attributes. */\n  attributes?: SecretAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n  /** Type of the secret value such as a password. */\n  contentType?: string;\n  /**\n   * True if the secret's lifetime is managed by key vault. If this is a key backing a certificate, then managed will be true.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly managed?: boolean;\n}\n\n/** The deleted secret list result */\nexport interface DeletedSecretListResult {\n  /**\n   * A response message containing a list of the deleted secrets in the vault along with a link to the next page of deleted secrets\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: DeletedSecretItem[];\n  /**\n   * The URL to get the next set of deleted secrets.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly nextLink?: string;\n}\n\n/** The backup secret result, containing the backup blob. */\nexport interface BackupSecretResult {\n  /**\n   * The backup blob containing the backed up secret.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly value?: Uint8Array;\n}\n\n/** The secret restore parameters. */\nexport interface SecretRestoreParameters {\n  /** The backup blob associated with a secret bundle. */\n  secretBundleBackup: Uint8Array;\n}\n\n/** Properties of the key backing a certificate. */\nexport interface SecretProperties {\n  /** The media type (MIME type). */\n  contentType?: string;\n}\n\n/** The secret management attributes. */\nexport type SecretAttributes = Attributes & {\n  /**\n   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled, otherwise 0.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recoverableDays?: number;\n  /**\n   * Reflects the deletion recovery level currently in effect for secrets in the current vault. If it contains 'Purgeable', the secret can be permanently deleted by a privileged user; otherwise, only the system can purge the secret, at the end of the retention interval.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly recoveryLevel?: DeletionRecoveryLevel;\n};\n\n/** A Deleted Secret consisting of its previous id, attributes and its tags, as well as information on when it will be purged. */\nexport type DeletedSecretBundle = SecretBundle & {\n  /** The url of the recovery object, used to identify and recover the deleted secret. */\n  recoveryId?: string;\n  /**\n   * The time when the secret is scheduled to be purged, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the secret was deleted, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly deletedDate?: Date;\n};\n\n/** The deleted secret item containing metadata about the deleted secret. */\nexport type DeletedSecretItem = SecretItem & {\n  /** The url of the recovery object, used to identify and recover the deleted secret. */\n  recoveryId?: string;\n  /**\n   * The time when the secret is scheduled to be purged, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the secret was deleted, in UTC\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly deletedDate?: Date;\n};\n\n/** Known values of {@link ApiVersion74} that the service accepts. */\nexport enum KnownApiVersion74 {\n  /** Api Version '7.4' */\n  Seven4 = \"7.4\"\n}\n\n/**\n * Defines values for ApiVersion74. \\\n * {@link KnownApiVersion74} can be used interchangeably with ApiVersion74,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **7.4**: Api Version '7.4'\n */\nexport type ApiVersion74 = string;\n\n/** Known values of {@link DeletionRecoveryLevel} that the service accepts. */\nexport enum KnownDeletionRecoveryLevel {\n  /** Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) */\n  Purgeable = \"Purgeable\",\n  /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered */\n  RecoverablePurgeable = \"Recoverable+Purgeable\",\n  /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered */\n  Recoverable = \"Recoverable\",\n  /** Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered */\n  RecoverableProtectedSubscription = \"Recoverable+ProtectedSubscription\",\n  /** Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. */\n  CustomizedRecoverablePurgeable = \"CustomizedRecoverable+Purgeable\",\n  /** Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. */\n  CustomizedRecoverable = \"CustomizedRecoverable\",\n  /** Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled. */\n  CustomizedRecoverableProtectedSubscription = \"CustomizedRecoverable+ProtectedSubscription\"\n}\n\n/**\n * Defines values for DeletionRecoveryLevel. \\\n * {@link KnownDeletionRecoveryLevel} can be used interchangeably with DeletionRecoveryLevel,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Purgeable**: Denotes a vault state in which deletion is an irreversible operation, without the possibility for recovery. This level corresponds to no protection being available against a Delete operation; the data is irretrievably lost upon accepting a Delete operation at the entity level or higher (vault, resource group, subscription etc.) \\\n * **Recoverable+Purgeable**: Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval (90 days), unless a Purge operation is requested, or the subscription is cancelled. System wil permanently delete it after 90 days, if not recovered \\\n * **Recoverable**: Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge). This level guarantees the recoverability of the deleted entity during the retention interval(90 days) and while the subscription is still available. System wil permanently delete it after 90 days, if not recovered \\\n * **Recoverable+ProtectedSubscription**: Denotes a vault and subscription state in which deletion is recoverable within retention interval (90 days), immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself  cannot be permanently canceled. System wil permanently delete it after 90 days, if not recovered \\\n * **CustomizedRecoverable+Purgeable**: Denotes a vault state in which deletion is recoverable, and which also permits immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90). This level guarantees the recoverability of the deleted entity during the retention interval, unless a Purge operation is requested, or the subscription is cancelled. \\\n * **CustomizedRecoverable**: Denotes a vault state in which deletion is recoverable without the possibility for immediate and permanent deletion (i.e. purge when 7<= SoftDeleteRetentionInDays < 90).This level guarantees the recoverability of the deleted entity during the retention interval and while the subscription is still available. \\\n * **CustomizedRecoverable+ProtectedSubscription**: Denotes a vault and subscription state in which deletion is recoverable, immediate and permanent deletion (i.e. purge) is not permitted, and in which the subscription itself cannot be permanently canceled when 7<= SoftDeleteRetentionInDays < 90. This level guarantees the recoverability of the deleted entity during the retention interval, and also reflects the fact that the subscription itself cannot be cancelled.\n */\nexport type DeletionRecoveryLevel = string;\n\n/** Optional parameters. */\nexport interface SetSecretOptionalParams extends coreClient.OperationOptions {\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n  /** Type of the secret value such as a password. */\n  contentType?: string;\n  /** The secret management attributes. */\n  secretAttributes?: SecretAttributes;\n}\n\n/** Contains response data for the setSecret operation. */\nexport type SetSecretResponse = SecretBundle;\n\n/** Optional parameters. */\nexport interface DeleteSecretOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the deleteSecret operation. */\nexport type DeleteSecretResponse = DeletedSecretBundle;\n\n/** Optional parameters. */\nexport interface UpdateSecretOptionalParams\n  extends coreClient.OperationOptions {\n  /** Type of the secret value such as a password. */\n  contentType?: string;\n  /** The secret management attributes. */\n  secretAttributes?: SecretAttributes;\n  /** Application specific metadata in the form of key-value pairs. */\n  tags?: { [propertyName: string]: string };\n}\n\n/** Contains response data for the updateSecret operation. */\nexport type UpdateSecretResponse = SecretBundle;\n\n/** Optional parameters. */\nexport interface GetSecretOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSecret operation. */\nexport type GetSecretResponse = SecretBundle;\n\n/** Optional parameters. */\nexport interface GetSecretsOptionalParams extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified, the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getSecrets operation. */\nexport type GetSecretsResponse = SecretListResult;\n\n/** Optional parameters. */\nexport interface GetSecretVersionsOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified, the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getSecretVersions operation. */\nexport type GetSecretVersionsResponse = SecretListResult;\n\n/** Optional parameters. */\nexport interface GetDeletedSecretsOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getDeletedSecrets operation. */\nexport type GetDeletedSecretsResponse = DeletedSecretListResult;\n\n/** Optional parameters. */\nexport interface GetDeletedSecretOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the getDeletedSecret operation. */\nexport type GetDeletedSecretResponse = DeletedSecretBundle;\n\n/** Optional parameters. */\nexport interface PurgeDeletedSecretOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface RecoverDeletedSecretOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the recoverDeletedSecret operation. */\nexport type RecoverDeletedSecretResponse = SecretBundle;\n\n/** Optional parameters. */\nexport interface BackupSecretOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the backupSecret operation. */\nexport type BackupSecretResponse = BackupSecretResult;\n\n/** Optional parameters. */\nexport interface RestoreSecretOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the restoreSecret operation. */\nexport type RestoreSecretResponse = SecretBundle;\n\n/** Optional parameters. */\nexport interface GetSecretsNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified, the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getSecretsNext operation. */\nexport type GetSecretsNextResponse = SecretListResult;\n\n/** Optional parameters. */\nexport interface GetSecretVersionsNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified, the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getSecretVersionsNext operation. */\nexport type GetSecretVersionsNextResponse = SecretListResult;\n\n/** Optional parameters. */\nexport interface GetDeletedSecretsNextOptionalParams\n  extends coreClient.OperationOptions {\n  /** Maximum number of results to return in a page. If not specified the service will return up to 25 results. */\n  maxresults?: number;\n}\n\n/** Contains response data for the getDeletedSecretsNext operation. */\nexport type GetDeletedSecretsNextResponse = DeletedSecretListResult;\n\n/** Optional parameters. */\nexport interface KeyVaultClientOptionalParams\n  extends coreHttpCompat.ExtendedServiceClientOptions {\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}